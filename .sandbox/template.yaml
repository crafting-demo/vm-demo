endpoints:
  - name: web
    http:
      routes:
        - path_prefix: /
          backend:
            target: dev
            port: web
  - name: rdp
    http:
      routes:
        - path_prefix: /
          backend:
            target: dev
            port: guacamole
      path: /guacamole/
workspaces:
  - name: dev
    ports:
      - name: web
        port: 5001
        protocol: HTTPS/TCP
      - name: guacamole
        port: 8080
        protocol: HTTP/TCP
    checkouts:
      - path: vm-demo
        repo:
          git: https://github.com/crafting-demo/vm-demo
        manifest:
          overlays:
            - inline:
                hooks:
                  post-checkout:
                    cmd: |
                      REMOTE=$(jq -r ".public_dns.value" /run/sandbox/fs/resources/windows/state)
                      scp -r -T -q -o StrictHostKeyChecking=no "$PWD" "Administrator@$REMOTE:/c:/Users/Administrator"
                      ssh "Administrator@$REMOTE" "powershell -file c:/Users/Administrator/vm-demo/.sandbox/remote/build.ps1"
                daemons:
                  eshop:
                    run:
                      cmd: |
                        REMOTE=$(jq -r ".public_dns.value" /run/sandbox/fs/resources/windows/state)
                        flock /tmp/eshop.lock \
                          --command 'ssh Administrator@'"$REMOTE"' "powershell -file c:/Users/Administrator/vm-demo/.sandbox/remote/run.ps1"'
                  logging:
                    run:
                      cmd: ./gradlew bootRun
                      dir: java/logging
                  portforward:
                    run:
                      cmd: |
                        REMOTE=$(jq -r ".public_dns.value" /run/sandbox/fs/resources/windows/state)
                        ssh -L 0.0.0.0:5001:localhost:5001 \
                          -R 3000:localhost:3000 \
                          -R 6379:redis:6379 \
                          -N "Administrator@$REMOTE"
                  rdp:
                    run:
                      cmd: .sandbox/guacamole/rdp.sh
                  guacd:
                    run:
                      cmd: |
                        docker rm -f guacd 2>/dev/null || true
                        docker run --rm --name guacd -a STDOUT -a STDERR \
                          -v "$HOME:/drive$HOME" \
                          guacamole/guacd:1.4.0
    packages:
      - name: openjdk
        version: '~17'
    base_snapshot: oci://us-docker.pkg.dev/crafting-dev/sandbox/shared/workspace:latest
    probes:
      readiness:
        - name: guacamole
          http_get:
            port: 8080
            path: /guacamole/
    wait_for:
      - windows
  - name: provisioner
    checkouts:
      - path: vm-demo
        repo:
          git: https://github.com/crafting-demo/vm-demo
    base_snapshot: oci://us-docker.pkg.dev/crafting-dev/sandbox/shared/workspace:latest
    env:
      - AWS_CONFIG_FILE=/run/sandbox/fs/secrets/shared/aws-config
dependencies:
  - name: guacamoledb
    service_type: mysql
    properties:
      database: guacamole
      password: guacamole
      username: guacamole
    snapshot: guacamoledb-r1
  - name: redis
    service_type: redis
    version: "7.0"
overview: |
  # Development with a Windows VM

  This sandbox is a development environment containing:

  - Dotnet based eShopOnWeb built and running in an EC2 Windows VM;
  - Java based logging service built and running in a sandbox workspace;
  - Redis running in a sandbox serving as an in-memory cache for eShopOnWeb.

  The sandbox automatically manages the EC2 Windows VM based on the lifecycle
  and establishes the communication between eShopOnWeb, logging service and Redis.

  During startup, the `dev` workspace will sync source code to the Windows VM,
  built and launches remotely, controlled by a daemon in the workspace.
  The eShopOnWeb will communicate with the logging service and Redis in the sandbox.

  For convinience, Web RDP (guacamole) is integrated to access the Windows VM
  using web. Click the endpoint [rdp]({{endpoints.rdp.url}}) to access the Windows desktop
  or click the resource `windows` to see the detailed instructions.
resources:
  - name: windows
    brief: EC2 Windows VM
    details: |
      EC2 Windows VM:

      - Hostname: {{state.public_dns.value}}
      - PublicIP: {{state.public_ip.value}}
      ```
      auto connect:i:1
      full address:s:{{state.public_dns.value}}
      username:s:Administrator
      ```

      Password can be found in `/run/sandbox/fs/resources/windows/state`.
    terraform:
      workspace: provisioner
      dir: vm-demo/.sandbox/provision/tf
      save_state: true
      run:
        timeout: 30m0s
